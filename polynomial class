
/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}
  */


public class Polynomial {
   
	int []arr = new int[0];
	public void setCoefficient(int degree, int coeff){
        if(degree>this.arr.length-1){
            int []arr2 = new int[degree+1];
            for(int i=0;i<this.arr.length;i++){
                arr2[i] = this.arr[i];
            }
            arr2[degree] = coeff;
            this.arr = arr2;
        }
        else{
            this.arr[degree] = coeff;    
        }
	}
	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
	public void print(){
        for(int i=0;i<this.arr.length;i++)
        {
            if(this.arr[i]!=0)
            {
                if(this.arr[i]>0)
                {
                    System.out.print(this.arr[i] + "x" + i+" ");
                }
                else 
                    System.out.print(1*(this.arr[i])+"x"+i+" ");
            }
        }
		
	}

	
	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p){    
        int n=this.arr.length;
        int m=p.arr.length;
        // int k=Math.min(m,n);
        if(n>m)
        {
        for(int i=0;i<m;i++)
        {
            this.arr[i]=this.arr[i]+p.arr[i];
        }
            
        }
        else
        {
            for(int i=0;i<n;i++)
                p.arr[i]=this.arr[i]+p.arr[i];
            return p;
        }
        return this;
        
	}
	
	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p){
		int n=this.arr.length;
        int m=p.arr.length;
        // int k=Math.min(m,n);
        int k=Math.max(m,n);
        int sum[]=new int[k];
        if(n>m)
        {
            for(int i=0;i<m;i++)
            {
                sum[i]=p.arr[i];
            }
        }
        else
        {
            for(int i=0;i<n;i++)
                sum[i]=this.arr[i];
        }
   
        if(n>m)
        {
            for(int i=0;i<k;i++)
                this.arr[i]=this.arr[i]-sum[i];
        }
        else
        {
            for(int i=0;i<k;i++)
                p.arr[i]=sum[i]-p.arr[i];
            
            return p;
        }
        // for (int i=0;i<p.arr.length;i++)
        //         p.arr[i] = -1*p.arr[i];
        return this;
    }
	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p){
		int m=this.arr.length;
        int n=p.arr.length;
        int arr2[]=new int[m+n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                arr2[i+j]+=this.arr[i]*p.arr[j];
            }
                
        }
        this.arr = arr2;
        return this;
	}

}
